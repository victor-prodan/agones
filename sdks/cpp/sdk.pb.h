// Copyright 2018 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#ifndef PROTOBUF_sdk_2eproto__INCLUDED
#define PROTOBUF_sdk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_sdk_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEmptyImpl();
void InitDefaultsEmpty();
void InitDefaultsKeyValueImpl();
void InitDefaultsKeyValue();
void InitDefaultsGameServer_ObjectMeta_AnnotationsEntry_DoNotUseImpl();
void InitDefaultsGameServer_ObjectMeta_AnnotationsEntry_DoNotUse();
void InitDefaultsGameServer_ObjectMeta_LabelsEntry_DoNotUseImpl();
void InitDefaultsGameServer_ObjectMeta_LabelsEntry_DoNotUse();
void InitDefaultsGameServer_ObjectMetaImpl();
void InitDefaultsGameServer_ObjectMeta();
void InitDefaultsGameServer_Spec_HealthImpl();
void InitDefaultsGameServer_Spec_Health();
void InitDefaultsGameServer_SpecImpl();
void InitDefaultsGameServer_Spec();
void InitDefaultsGameServer_Status_PortImpl();
void InitDefaultsGameServer_Status_Port();
void InitDefaultsGameServer_StatusImpl();
void InitDefaultsGameServer_Status();
void InitDefaultsGameServerImpl();
void InitDefaultsGameServer();
inline void InitDefaults() {
  InitDefaultsEmpty();
  InitDefaultsKeyValue();
  InitDefaultsGameServer_ObjectMeta_AnnotationsEntry_DoNotUse();
  InitDefaultsGameServer_ObjectMeta_LabelsEntry_DoNotUse();
  InitDefaultsGameServer_ObjectMeta();
  InitDefaultsGameServer_Spec_Health();
  InitDefaultsGameServer_Spec();
  InitDefaultsGameServer_Status_Port();
  InitDefaultsGameServer_Status();
  InitDefaultsGameServer();
}
}  // namespace protobuf_sdk_2eproto
namespace stable {
namespace agones {
namespace dev {
namespace sdk {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GameServer;
class GameServerDefaultTypeInternal;
extern GameServerDefaultTypeInternal _GameServer_default_instance_;
class GameServer_ObjectMeta;
class GameServer_ObjectMetaDefaultTypeInternal;
extern GameServer_ObjectMetaDefaultTypeInternal _GameServer_ObjectMeta_default_instance_;
class GameServer_ObjectMeta_AnnotationsEntry_DoNotUse;
class GameServer_ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern GameServer_ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal _GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_;
class GameServer_ObjectMeta_LabelsEntry_DoNotUse;
class GameServer_ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal;
extern GameServer_ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal _GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_;
class GameServer_Spec;
class GameServer_SpecDefaultTypeInternal;
extern GameServer_SpecDefaultTypeInternal _GameServer_Spec_default_instance_;
class GameServer_Spec_Health;
class GameServer_Spec_HealthDefaultTypeInternal;
extern GameServer_Spec_HealthDefaultTypeInternal _GameServer_Spec_Health_default_instance_;
class GameServer_Status;
class GameServer_StatusDefaultTypeInternal;
extern GameServer_StatusDefaultTypeInternal _GameServer_Status_default_instance_;
class GameServer_Status_Port;
class GameServer_Status_PortDefaultTypeInternal;
extern GameServer_Status_PortDefaultTypeInternal _GameServer_Status_Port_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
}  // namespace sdk
}  // namespace dev
}  // namespace agones
}  // namespace stable
namespace stable {
namespace agones {
namespace dev {
namespace sdk {

// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stable.agones.dev.sdk.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const PROTOBUF_FINAL { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:stable.agones.dev.sdk.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_sdk_2eproto::TableStruct;
  friend void ::protobuf_sdk_2eproto::InitDefaultsEmptyImpl();
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stable.agones.dev.sdk.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(KeyValue* other);
  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:stable.agones.dev.sdk.KeyValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_sdk_2eproto::TableStruct;
  friend void ::protobuf_sdk_2eproto::InitDefaultsKeyValueImpl();
};
// -------------------------------------------------------------------

class GameServer_ObjectMeta_AnnotationsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GameServer_ObjectMeta_AnnotationsEntry_DoNotUse();
  GameServer_ObjectMeta_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse& other);
  static const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse*>(&_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GameServer_ObjectMeta_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GameServer_ObjectMeta_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GameServer_ObjectMeta_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GameServer_ObjectMeta_LabelsEntry_DoNotUse();
  GameServer_ObjectMeta_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GameServer_ObjectMeta_LabelsEntry_DoNotUse& other);
  static const GameServer_ObjectMeta_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameServer_ObjectMeta_LabelsEntry_DoNotUse*>(&_GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GameServer_ObjectMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stable.agones.dev.sdk.GameServer.ObjectMeta) */ {
 public:
  GameServer_ObjectMeta();
  virtual ~GameServer_ObjectMeta();

  GameServer_ObjectMeta(const GameServer_ObjectMeta& from);

  inline GameServer_ObjectMeta& operator=(const GameServer_ObjectMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameServer_ObjectMeta(GameServer_ObjectMeta&& from) noexcept
    : GameServer_ObjectMeta() {
    *this = ::std::move(from);
  }

  inline GameServer_ObjectMeta& operator=(GameServer_ObjectMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServer_ObjectMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_ObjectMeta* internal_default_instance() {
    return reinterpret_cast<const GameServer_ObjectMeta*>(
               &_GameServer_ObjectMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GameServer_ObjectMeta* other);
  friend void swap(GameServer_ObjectMeta& a, GameServer_ObjectMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameServer_ObjectMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  GameServer_ObjectMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameServer_ObjectMeta& from);
  void MergeFrom(const GameServer_ObjectMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameServer_ObjectMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> annotations = 8;
  int annotations_size() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      annotations() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_annotations();

  // map<string, string> labels = 9;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string namespace = 2;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 2;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // string uid = 3;
  void clear_uid();
  static const int kUidFieldNumber = 3;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // string resource_version = 4;
  void clear_resource_version();
  static const int kResourceVersionFieldNumber = 4;
  const ::std::string& resource_version() const;
  void set_resource_version(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_version(::std::string&& value);
  #endif
  void set_resource_version(const char* value);
  void set_resource_version(const char* value, size_t size);
  ::std::string* mutable_resource_version();
  ::std::string* release_resource_version();
  void set_allocated_resource_version(::std::string* resource_version);

  // int64 generation = 5;
  void clear_generation();
  static const int kGenerationFieldNumber = 5;
  ::google::protobuf::int64 generation() const;
  void set_generation(::google::protobuf::int64 value);

  // int64 creation_timestamp = 6;
  void clear_creation_timestamp();
  static const int kCreationTimestampFieldNumber = 6;
  ::google::protobuf::int64 creation_timestamp() const;
  void set_creation_timestamp(::google::protobuf::int64 value);

  // int64 deletion_timestamp = 7;
  void clear_deletion_timestamp();
  static const int kDeletionTimestampFieldNumber = 7;
  ::google::protobuf::int64 deletion_timestamp() const;
  void set_deletion_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:stable.agones.dev.sdk.GameServer.ObjectMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      GameServer_ObjectMeta_AnnotationsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::google::protobuf::internal::MapField<
      GameServer_ObjectMeta_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr resource_version_;
  ::google::protobuf::int64 generation_;
  ::google::protobuf::int64 creation_timestamp_;
  ::google::protobuf::int64 deletion_timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_sdk_2eproto::TableStruct;
  friend void ::protobuf_sdk_2eproto::InitDefaultsGameServer_ObjectMetaImpl();
};
// -------------------------------------------------------------------

class GameServer_Spec_Health : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stable.agones.dev.sdk.GameServer.Spec.Health) */ {
 public:
  GameServer_Spec_Health();
  virtual ~GameServer_Spec_Health();

  GameServer_Spec_Health(const GameServer_Spec_Health& from);

  inline GameServer_Spec_Health& operator=(const GameServer_Spec_Health& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameServer_Spec_Health(GameServer_Spec_Health&& from) noexcept
    : GameServer_Spec_Health() {
    *this = ::std::move(from);
  }

  inline GameServer_Spec_Health& operator=(GameServer_Spec_Health&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServer_Spec_Health& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Spec_Health* internal_default_instance() {
    return reinterpret_cast<const GameServer_Spec_Health*>(
               &_GameServer_Spec_Health_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GameServer_Spec_Health* other);
  friend void swap(GameServer_Spec_Health& a, GameServer_Spec_Health& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Spec_Health* New() const PROTOBUF_FINAL { return New(NULL); }

  GameServer_Spec_Health* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameServer_Spec_Health& from);
  void MergeFrom(const GameServer_Spec_Health& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameServer_Spec_Health* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // int32 PeriodSeconds = 2;
  void clear_periodseconds();
  static const int kPeriodSecondsFieldNumber = 2;
  ::google::protobuf::int32 periodseconds() const;
  void set_periodseconds(::google::protobuf::int32 value);

  // int32 FailureThreshold = 3;
  void clear_failurethreshold();
  static const int kFailureThresholdFieldNumber = 3;
  ::google::protobuf::int32 failurethreshold() const;
  void set_failurethreshold(::google::protobuf::int32 value);

  // int32 InitialDelaySeconds = 4;
  void clear_initialdelayseconds();
  static const int kInitialDelaySecondsFieldNumber = 4;
  ::google::protobuf::int32 initialdelayseconds() const;
  void set_initialdelayseconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stable.agones.dev.sdk.GameServer.Spec.Health)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  ::google::protobuf::int32 periodseconds_;
  ::google::protobuf::int32 failurethreshold_;
  ::google::protobuf::int32 initialdelayseconds_;
  mutable int _cached_size_;
  friend struct ::protobuf_sdk_2eproto::TableStruct;
  friend void ::protobuf_sdk_2eproto::InitDefaultsGameServer_Spec_HealthImpl();
};
// -------------------------------------------------------------------

class GameServer_Spec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stable.agones.dev.sdk.GameServer.Spec) */ {
 public:
  GameServer_Spec();
  virtual ~GameServer_Spec();

  GameServer_Spec(const GameServer_Spec& from);

  inline GameServer_Spec& operator=(const GameServer_Spec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameServer_Spec(GameServer_Spec&& from) noexcept
    : GameServer_Spec() {
    *this = ::std::move(from);
  }

  inline GameServer_Spec& operator=(GameServer_Spec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServer_Spec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Spec* internal_default_instance() {
    return reinterpret_cast<const GameServer_Spec*>(
               &_GameServer_Spec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GameServer_Spec* other);
  friend void swap(GameServer_Spec& a, GameServer_Spec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Spec* New() const PROTOBUF_FINAL { return New(NULL); }

  GameServer_Spec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameServer_Spec& from);
  void MergeFrom(const GameServer_Spec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameServer_Spec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GameServer_Spec_Health Health;

  // accessors -------------------------------------------------------

  // .stable.agones.dev.sdk.GameServer.Spec.Health health = 1;
  bool has_health() const;
  void clear_health();
  static const int kHealthFieldNumber = 1;
  const ::stable::agones::dev::sdk::GameServer_Spec_Health& health() const;
  ::stable::agones::dev::sdk::GameServer_Spec_Health* release_health();
  ::stable::agones::dev::sdk::GameServer_Spec_Health* mutable_health();
  void set_allocated_health(::stable::agones::dev::sdk::GameServer_Spec_Health* health);

  // @@protoc_insertion_point(class_scope:stable.agones.dev.sdk.GameServer.Spec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::stable::agones::dev::sdk::GameServer_Spec_Health* health_;
  mutable int _cached_size_;
  friend struct ::protobuf_sdk_2eproto::TableStruct;
  friend void ::protobuf_sdk_2eproto::InitDefaultsGameServer_SpecImpl();
};
// -------------------------------------------------------------------

class GameServer_Status_Port : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stable.agones.dev.sdk.GameServer.Status.Port) */ {
 public:
  GameServer_Status_Port();
  virtual ~GameServer_Status_Port();

  GameServer_Status_Port(const GameServer_Status_Port& from);

  inline GameServer_Status_Port& operator=(const GameServer_Status_Port& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameServer_Status_Port(GameServer_Status_Port&& from) noexcept
    : GameServer_Status_Port() {
    *this = ::std::move(from);
  }

  inline GameServer_Status_Port& operator=(GameServer_Status_Port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServer_Status_Port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Status_Port* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status_Port*>(
               &_GameServer_Status_Port_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GameServer_Status_Port* other);
  friend void swap(GameServer_Status_Port& a, GameServer_Status_Port& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status_Port* New() const PROTOBUF_FINAL { return New(NULL); }

  GameServer_Status_Port* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameServer_Status_Port& from);
  void MergeFrom(const GameServer_Status_Port& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameServer_Status_Port* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stable.agones.dev.sdk.GameServer.Status.Port)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_sdk_2eproto::TableStruct;
  friend void ::protobuf_sdk_2eproto::InitDefaultsGameServer_Status_PortImpl();
};
// -------------------------------------------------------------------

class GameServer_Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stable.agones.dev.sdk.GameServer.Status) */ {
 public:
  GameServer_Status();
  virtual ~GameServer_Status();

  GameServer_Status(const GameServer_Status& from);

  inline GameServer_Status& operator=(const GameServer_Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameServer_Status(GameServer_Status&& from) noexcept
    : GameServer_Status() {
    *this = ::std::move(from);
  }

  inline GameServer_Status& operator=(GameServer_Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServer_Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Status* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status*>(
               &_GameServer_Status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GameServer_Status* other);
  friend void swap(GameServer_Status& a, GameServer_Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status* New() const PROTOBUF_FINAL { return New(NULL); }

  GameServer_Status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameServer_Status& from);
  void MergeFrom(const GameServer_Status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameServer_Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GameServer_Status_Port Port;

  // accessors -------------------------------------------------------

  // repeated .stable.agones.dev.sdk.GameServer.Status.Port ports = 3;
  int ports_size() const;
  void clear_ports();
  static const int kPortsFieldNumber = 3;
  const ::stable::agones::dev::sdk::GameServer_Status_Port& ports(int index) const;
  ::stable::agones::dev::sdk::GameServer_Status_Port* mutable_ports(int index);
  ::stable::agones::dev::sdk::GameServer_Status_Port* add_ports();
  ::google::protobuf::RepeatedPtrField< ::stable::agones::dev::sdk::GameServer_Status_Port >*
      mutable_ports();
  const ::google::protobuf::RepeatedPtrField< ::stable::agones::dev::sdk::GameServer_Status_Port >&
      ports() const;

  // string state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:stable.agones.dev.sdk.GameServer.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::stable::agones::dev::sdk::GameServer_Status_Port > ports_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend struct ::protobuf_sdk_2eproto::TableStruct;
  friend void ::protobuf_sdk_2eproto::InitDefaultsGameServer_StatusImpl();
};
// -------------------------------------------------------------------

class GameServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stable.agones.dev.sdk.GameServer) */ {
 public:
  GameServer();
  virtual ~GameServer();

  GameServer(const GameServer& from);

  inline GameServer& operator=(const GameServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameServer(GameServer&& from) noexcept
    : GameServer() {
    *this = ::std::move(from);
  }

  inline GameServer& operator=(GameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer* internal_default_instance() {
    return reinterpret_cast<const GameServer*>(
               &_GameServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GameServer* other);
  friend void swap(GameServer& a, GameServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameServer* New() const PROTOBUF_FINAL { return New(NULL); }

  GameServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameServer& from);
  void MergeFrom(const GameServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GameServer_ObjectMeta ObjectMeta;
  typedef GameServer_Spec Spec;
  typedef GameServer_Status Status;

  // accessors -------------------------------------------------------

  // .stable.agones.dev.sdk.GameServer.ObjectMeta object_meta = 1;
  bool has_object_meta() const;
  void clear_object_meta();
  static const int kObjectMetaFieldNumber = 1;
  const ::stable::agones::dev::sdk::GameServer_ObjectMeta& object_meta() const;
  ::stable::agones::dev::sdk::GameServer_ObjectMeta* release_object_meta();
  ::stable::agones::dev::sdk::GameServer_ObjectMeta* mutable_object_meta();
  void set_allocated_object_meta(::stable::agones::dev::sdk::GameServer_ObjectMeta* object_meta);

  // .stable.agones.dev.sdk.GameServer.Spec spec = 2;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 2;
  const ::stable::agones::dev::sdk::GameServer_Spec& spec() const;
  ::stable::agones::dev::sdk::GameServer_Spec* release_spec();
  ::stable::agones::dev::sdk::GameServer_Spec* mutable_spec();
  void set_allocated_spec(::stable::agones::dev::sdk::GameServer_Spec* spec);

  // .stable.agones.dev.sdk.GameServer.Status status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::stable::agones::dev::sdk::GameServer_Status& status() const;
  ::stable::agones::dev::sdk::GameServer_Status* release_status();
  ::stable::agones::dev::sdk::GameServer_Status* mutable_status();
  void set_allocated_status(::stable::agones::dev::sdk::GameServer_Status* status);

  // @@protoc_insertion_point(class_scope:stable.agones.dev.sdk.GameServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::stable::agones::dev::sdk::GameServer_ObjectMeta* object_meta_;
  ::stable::agones::dev::sdk::GameServer_Spec* spec_;
  ::stable::agones::dev::sdk::GameServer_Status* status_;
  mutable int _cached_size_;
  friend struct ::protobuf_sdk_2eproto::TableStruct;
  friend void ::protobuf_sdk_2eproto::InitDefaultsGameServerImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// KeyValue

// string key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.KeyValue.key)
  return key_.GetNoArena();
}
inline void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.KeyValue.key)
}
#if LANG_CXX11
inline void KeyValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stable.agones.dev.sdk.KeyValue.key)
}
#endif
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stable.agones.dev.sdk.KeyValue.key)
}
inline void KeyValue::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stable.agones.dev.sdk.KeyValue.key)
}
inline ::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.KeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.KeyValue.key)
}

// string value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.KeyValue.value)
  return value_.GetNoArena();
}
inline void KeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.KeyValue.value)
}
#if LANG_CXX11
inline void KeyValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stable.agones.dev.sdk.KeyValue.value)
}
#endif
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stable.agones.dev.sdk.KeyValue.value)
}
inline void KeyValue::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stable.agones.dev.sdk.KeyValue.value)
}
inline ::std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.KeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.KeyValue.value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GameServer_ObjectMeta

// string name = 1;
inline void GameServer_ObjectMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameServer_ObjectMeta::name() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.ObjectMeta.name)
  return name_.GetNoArena();
}
inline void GameServer_ObjectMeta::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.ObjectMeta.name)
}
#if LANG_CXX11
inline void GameServer_ObjectMeta::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stable.agones.dev.sdk.GameServer.ObjectMeta.name)
}
#endif
inline void GameServer_ObjectMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stable.agones.dev.sdk.GameServer.ObjectMeta.name)
}
inline void GameServer_ObjectMeta::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stable.agones.dev.sdk.GameServer.ObjectMeta.name)
}
inline ::std::string* GameServer_ObjectMeta::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.ObjectMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameServer_ObjectMeta::release_name() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.ObjectMeta.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameServer_ObjectMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.ObjectMeta.name)
}

// string namespace = 2;
inline void GameServer_ObjectMeta::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameServer_ObjectMeta::namespace_() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.ObjectMeta.namespace)
  return namespace__.GetNoArena();
}
inline void GameServer_ObjectMeta::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.ObjectMeta.namespace)
}
#if LANG_CXX11
inline void GameServer_ObjectMeta::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stable.agones.dev.sdk.GameServer.ObjectMeta.namespace)
}
#endif
inline void GameServer_ObjectMeta::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stable.agones.dev.sdk.GameServer.ObjectMeta.namespace)
}
inline void GameServer_ObjectMeta::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stable.agones.dev.sdk.GameServer.ObjectMeta.namespace)
}
inline ::std::string* GameServer_ObjectMeta::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.ObjectMeta.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameServer_ObjectMeta::release_namespace_() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.ObjectMeta.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameServer_ObjectMeta::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.ObjectMeta.namespace)
}

// string uid = 3;
inline void GameServer_ObjectMeta::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameServer_ObjectMeta::uid() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.ObjectMeta.uid)
  return uid_.GetNoArena();
}
inline void GameServer_ObjectMeta::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.ObjectMeta.uid)
}
#if LANG_CXX11
inline void GameServer_ObjectMeta::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stable.agones.dev.sdk.GameServer.ObjectMeta.uid)
}
#endif
inline void GameServer_ObjectMeta::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stable.agones.dev.sdk.GameServer.ObjectMeta.uid)
}
inline void GameServer_ObjectMeta::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stable.agones.dev.sdk.GameServer.ObjectMeta.uid)
}
inline ::std::string* GameServer_ObjectMeta::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.ObjectMeta.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameServer_ObjectMeta::release_uid() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.ObjectMeta.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameServer_ObjectMeta::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.ObjectMeta.uid)
}

// string resource_version = 4;
inline void GameServer_ObjectMeta::clear_resource_version() {
  resource_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameServer_ObjectMeta::resource_version() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version)
  return resource_version_.GetNoArena();
}
inline void GameServer_ObjectMeta::set_resource_version(const ::std::string& value) {
  
  resource_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version)
}
#if LANG_CXX11
inline void GameServer_ObjectMeta::set_resource_version(::std::string&& value) {
  
  resource_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version)
}
#endif
inline void GameServer_ObjectMeta::set_resource_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version)
}
inline void GameServer_ObjectMeta::set_resource_version(const char* value, size_t size) {
  
  resource_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version)
}
inline ::std::string* GameServer_ObjectMeta::mutable_resource_version() {
  
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version)
  return resource_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameServer_ObjectMeta::release_resource_version() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version)
  
  return resource_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameServer_ObjectMeta::set_allocated_resource_version(::std::string* resource_version) {
  if (resource_version != NULL) {
    
  } else {
    
  }
  resource_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_version);
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version)
}

// int64 generation = 5;
inline void GameServer_ObjectMeta::clear_generation() {
  generation_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameServer_ObjectMeta::generation() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.ObjectMeta.generation)
  return generation_;
}
inline void GameServer_ObjectMeta::set_generation(::google::protobuf::int64 value) {
  
  generation_ = value;
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.ObjectMeta.generation)
}

// int64 creation_timestamp = 6;
inline void GameServer_ObjectMeta::clear_creation_timestamp() {
  creation_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameServer_ObjectMeta::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.ObjectMeta.creation_timestamp)
  return creation_timestamp_;
}
inline void GameServer_ObjectMeta::set_creation_timestamp(::google::protobuf::int64 value) {
  
  creation_timestamp_ = value;
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.ObjectMeta.creation_timestamp)
}

// int64 deletion_timestamp = 7;
inline void GameServer_ObjectMeta::clear_deletion_timestamp() {
  deletion_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameServer_ObjectMeta::deletion_timestamp() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.ObjectMeta.deletion_timestamp)
  return deletion_timestamp_;
}
inline void GameServer_ObjectMeta::set_deletion_timestamp(::google::protobuf::int64 value) {
  
  deletion_timestamp_ = value;
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.ObjectMeta.deletion_timestamp)
}

// map<string, string> annotations = 8;
inline int GameServer_ObjectMeta::annotations_size() const {
  return annotations_.size();
}
inline void GameServer_ObjectMeta::clear_annotations() {
  annotations_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
GameServer_ObjectMeta::annotations() const {
  // @@protoc_insertion_point(field_map:stable.agones.dev.sdk.GameServer.ObjectMeta.annotations)
  return annotations_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
GameServer_ObjectMeta::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:stable.agones.dev.sdk.GameServer.ObjectMeta.annotations)
  return annotations_.MutableMap();
}

// map<string, string> labels = 9;
inline int GameServer_ObjectMeta::labels_size() const {
  return labels_.size();
}
inline void GameServer_ObjectMeta::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
GameServer_ObjectMeta::labels() const {
  // @@protoc_insertion_point(field_map:stable.agones.dev.sdk.GameServer.ObjectMeta.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
GameServer_ObjectMeta::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:stable.agones.dev.sdk.GameServer.ObjectMeta.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// GameServer_Spec_Health

// bool Disabled = 1;
inline void GameServer_Spec_Health::clear_disabled() {
  disabled_ = false;
}
inline bool GameServer_Spec_Health::disabled() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.Spec.Health.Disabled)
  return disabled_;
}
inline void GameServer_Spec_Health::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.Spec.Health.Disabled)
}

// int32 PeriodSeconds = 2;
inline void GameServer_Spec_Health::clear_periodseconds() {
  periodseconds_ = 0;
}
inline ::google::protobuf::int32 GameServer_Spec_Health::periodseconds() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.Spec.Health.PeriodSeconds)
  return periodseconds_;
}
inline void GameServer_Spec_Health::set_periodseconds(::google::protobuf::int32 value) {
  
  periodseconds_ = value;
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.Spec.Health.PeriodSeconds)
}

// int32 FailureThreshold = 3;
inline void GameServer_Spec_Health::clear_failurethreshold() {
  failurethreshold_ = 0;
}
inline ::google::protobuf::int32 GameServer_Spec_Health::failurethreshold() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.Spec.Health.FailureThreshold)
  return failurethreshold_;
}
inline void GameServer_Spec_Health::set_failurethreshold(::google::protobuf::int32 value) {
  
  failurethreshold_ = value;
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.Spec.Health.FailureThreshold)
}

// int32 InitialDelaySeconds = 4;
inline void GameServer_Spec_Health::clear_initialdelayseconds() {
  initialdelayseconds_ = 0;
}
inline ::google::protobuf::int32 GameServer_Spec_Health::initialdelayseconds() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.Spec.Health.InitialDelaySeconds)
  return initialdelayseconds_;
}
inline void GameServer_Spec_Health::set_initialdelayseconds(::google::protobuf::int32 value) {
  
  initialdelayseconds_ = value;
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.Spec.Health.InitialDelaySeconds)
}

// -------------------------------------------------------------------

// GameServer_Spec

// .stable.agones.dev.sdk.GameServer.Spec.Health health = 1;
inline bool GameServer_Spec::has_health() const {
  return this != internal_default_instance() && health_ != NULL;
}
inline void GameServer_Spec::clear_health() {
  if (GetArenaNoVirtual() == NULL && health_ != NULL) {
    delete health_;
  }
  health_ = NULL;
}
inline const ::stable::agones::dev::sdk::GameServer_Spec_Health& GameServer_Spec::health() const {
  const ::stable::agones::dev::sdk::GameServer_Spec_Health* p = health_;
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.Spec.health)
  return p != NULL ? *p : *reinterpret_cast<const ::stable::agones::dev::sdk::GameServer_Spec_Health*>(
      &::stable::agones::dev::sdk::_GameServer_Spec_Health_default_instance_);
}
inline ::stable::agones::dev::sdk::GameServer_Spec_Health* GameServer_Spec::release_health() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.Spec.health)
  
  ::stable::agones::dev::sdk::GameServer_Spec_Health* temp = health_;
  health_ = NULL;
  return temp;
}
inline ::stable::agones::dev::sdk::GameServer_Spec_Health* GameServer_Spec::mutable_health() {
  
  if (health_ == NULL) {
    health_ = new ::stable::agones::dev::sdk::GameServer_Spec_Health;
  }
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.Spec.health)
  return health_;
}
inline void GameServer_Spec::set_allocated_health(::stable::agones::dev::sdk::GameServer_Spec_Health* health) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete health_;
  }
  if (health) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      health = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, health, submessage_arena);
    }
    
  } else {
    
  }
  health_ = health;
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.Spec.health)
}

// -------------------------------------------------------------------

// GameServer_Status_Port

// string name = 1;
inline void GameServer_Status_Port::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameServer_Status_Port::name() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.Status.Port.name)
  return name_.GetNoArena();
}
inline void GameServer_Status_Port::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.Status.Port.name)
}
#if LANG_CXX11
inline void GameServer_Status_Port::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stable.agones.dev.sdk.GameServer.Status.Port.name)
}
#endif
inline void GameServer_Status_Port::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stable.agones.dev.sdk.GameServer.Status.Port.name)
}
inline void GameServer_Status_Port::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stable.agones.dev.sdk.GameServer.Status.Port.name)
}
inline ::std::string* GameServer_Status_Port::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.Status.Port.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameServer_Status_Port::release_name() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.Status.Port.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameServer_Status_Port::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.Status.Port.name)
}

// int32 port = 2;
inline void GameServer_Status_Port::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 GameServer_Status_Port::port() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.Status.Port.port)
  return port_;
}
inline void GameServer_Status_Port::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.Status.Port.port)
}

// -------------------------------------------------------------------

// GameServer_Status

// string state = 1;
inline void GameServer_Status::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameServer_Status::state() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.Status.state)
  return state_.GetNoArena();
}
inline void GameServer_Status::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.Status.state)
}
#if LANG_CXX11
inline void GameServer_Status::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stable.agones.dev.sdk.GameServer.Status.state)
}
#endif
inline void GameServer_Status::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stable.agones.dev.sdk.GameServer.Status.state)
}
inline void GameServer_Status::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stable.agones.dev.sdk.GameServer.Status.state)
}
inline ::std::string* GameServer_Status::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.Status.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameServer_Status::release_state() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.Status.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameServer_Status::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.Status.state)
}

// string address = 2;
inline void GameServer_Status::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameServer_Status::address() const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.Status.address)
  return address_.GetNoArena();
}
inline void GameServer_Status::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stable.agones.dev.sdk.GameServer.Status.address)
}
#if LANG_CXX11
inline void GameServer_Status::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stable.agones.dev.sdk.GameServer.Status.address)
}
#endif
inline void GameServer_Status::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stable.agones.dev.sdk.GameServer.Status.address)
}
inline void GameServer_Status::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stable.agones.dev.sdk.GameServer.Status.address)
}
inline ::std::string* GameServer_Status::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.Status.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameServer_Status::release_address() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.Status.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameServer_Status::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.Status.address)
}

// repeated .stable.agones.dev.sdk.GameServer.Status.Port ports = 3;
inline int GameServer_Status::ports_size() const {
  return ports_.size();
}
inline void GameServer_Status::clear_ports() {
  ports_.Clear();
}
inline const ::stable::agones::dev::sdk::GameServer_Status_Port& GameServer_Status::ports(int index) const {
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.Status.ports)
  return ports_.Get(index);
}
inline ::stable::agones::dev::sdk::GameServer_Status_Port* GameServer_Status::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.Status.ports)
  return ports_.Mutable(index);
}
inline ::stable::agones::dev::sdk::GameServer_Status_Port* GameServer_Status::add_ports() {
  // @@protoc_insertion_point(field_add:stable.agones.dev.sdk.GameServer.Status.ports)
  return ports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::stable::agones::dev::sdk::GameServer_Status_Port >*
GameServer_Status::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:stable.agones.dev.sdk.GameServer.Status.ports)
  return &ports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::stable::agones::dev::sdk::GameServer_Status_Port >&
GameServer_Status::ports() const {
  // @@protoc_insertion_point(field_list:stable.agones.dev.sdk.GameServer.Status.ports)
  return ports_;
}

// -------------------------------------------------------------------

// GameServer

// .stable.agones.dev.sdk.GameServer.ObjectMeta object_meta = 1;
inline bool GameServer::has_object_meta() const {
  return this != internal_default_instance() && object_meta_ != NULL;
}
inline void GameServer::clear_object_meta() {
  if (GetArenaNoVirtual() == NULL && object_meta_ != NULL) {
    delete object_meta_;
  }
  object_meta_ = NULL;
}
inline const ::stable::agones::dev::sdk::GameServer_ObjectMeta& GameServer::object_meta() const {
  const ::stable::agones::dev::sdk::GameServer_ObjectMeta* p = object_meta_;
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.object_meta)
  return p != NULL ? *p : *reinterpret_cast<const ::stable::agones::dev::sdk::GameServer_ObjectMeta*>(
      &::stable::agones::dev::sdk::_GameServer_ObjectMeta_default_instance_);
}
inline ::stable::agones::dev::sdk::GameServer_ObjectMeta* GameServer::release_object_meta() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.object_meta)
  
  ::stable::agones::dev::sdk::GameServer_ObjectMeta* temp = object_meta_;
  object_meta_ = NULL;
  return temp;
}
inline ::stable::agones::dev::sdk::GameServer_ObjectMeta* GameServer::mutable_object_meta() {
  
  if (object_meta_ == NULL) {
    object_meta_ = new ::stable::agones::dev::sdk::GameServer_ObjectMeta;
  }
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.object_meta)
  return object_meta_;
}
inline void GameServer::set_allocated_object_meta(::stable::agones::dev::sdk::GameServer_ObjectMeta* object_meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete object_meta_;
  }
  if (object_meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      object_meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object_meta, submessage_arena);
    }
    
  } else {
    
  }
  object_meta_ = object_meta;
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.object_meta)
}

// .stable.agones.dev.sdk.GameServer.Spec spec = 2;
inline bool GameServer::has_spec() const {
  return this != internal_default_instance() && spec_ != NULL;
}
inline void GameServer::clear_spec() {
  if (GetArenaNoVirtual() == NULL && spec_ != NULL) {
    delete spec_;
  }
  spec_ = NULL;
}
inline const ::stable::agones::dev::sdk::GameServer_Spec& GameServer::spec() const {
  const ::stable::agones::dev::sdk::GameServer_Spec* p = spec_;
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.spec)
  return p != NULL ? *p : *reinterpret_cast<const ::stable::agones::dev::sdk::GameServer_Spec*>(
      &::stable::agones::dev::sdk::_GameServer_Spec_default_instance_);
}
inline ::stable::agones::dev::sdk::GameServer_Spec* GameServer::release_spec() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.spec)
  
  ::stable::agones::dev::sdk::GameServer_Spec* temp = spec_;
  spec_ = NULL;
  return temp;
}
inline ::stable::agones::dev::sdk::GameServer_Spec* GameServer::mutable_spec() {
  
  if (spec_ == NULL) {
    spec_ = new ::stable::agones::dev::sdk::GameServer_Spec;
  }
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.spec)
  return spec_;
}
inline void GameServer::set_allocated_spec(::stable::agones::dev::sdk::GameServer_Spec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.spec)
}

// .stable.agones.dev.sdk.GameServer.Status status = 3;
inline bool GameServer::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void GameServer::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::stable::agones::dev::sdk::GameServer_Status& GameServer::status() const {
  const ::stable::agones::dev::sdk::GameServer_Status* p = status_;
  // @@protoc_insertion_point(field_get:stable.agones.dev.sdk.GameServer.status)
  return p != NULL ? *p : *reinterpret_cast<const ::stable::agones::dev::sdk::GameServer_Status*>(
      &::stable::agones::dev::sdk::_GameServer_Status_default_instance_);
}
inline ::stable::agones::dev::sdk::GameServer_Status* GameServer::release_status() {
  // @@protoc_insertion_point(field_release:stable.agones.dev.sdk.GameServer.status)
  
  ::stable::agones::dev::sdk::GameServer_Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::stable::agones::dev::sdk::GameServer_Status* GameServer::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::stable::agones::dev::sdk::GameServer_Status;
  }
  // @@protoc_insertion_point(field_mutable:stable.agones.dev.sdk.GameServer.status)
  return status_;
}
inline void GameServer::set_allocated_status(::stable::agones::dev::sdk::GameServer_Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:stable.agones.dev.sdk.GameServer.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sdk
}  // namespace dev
}  // namespace agones
}  // namespace stable

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sdk_2eproto__INCLUDED
