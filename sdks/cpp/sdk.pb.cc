// Copyright 2018 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#include "sdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace stable {
namespace agones {
namespace dev {
namespace sdk {
class EmptyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Empty>
      _instance;
} _Empty_default_instance_;
class KeyValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyValue>
      _instance;
} _KeyValue_default_instance_;
class GameServer_ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse>
      _instance;
} _GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_;
class GameServer_ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServer_ObjectMeta_LabelsEntry_DoNotUse>
      _instance;
} _GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_;
class GameServer_ObjectMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServer_ObjectMeta>
      _instance;
} _GameServer_ObjectMeta_default_instance_;
class GameServer_Spec_HealthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServer_Spec_Health>
      _instance;
} _GameServer_Spec_Health_default_instance_;
class GameServer_SpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServer_Spec>
      _instance;
} _GameServer_Spec_default_instance_;
class GameServer_Status_PortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServer_Status_Port>
      _instance;
} _GameServer_Status_Port_default_instance_;
class GameServer_StatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServer_Status>
      _instance;
} _GameServer_Status_default_instance_;
class GameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServer>
      _instance;
} _GameServer_default_instance_;
}  // namespace sdk
}  // namespace dev
}  // namespace agones
}  // namespace stable
namespace protobuf_sdk_2eproto {
void InitDefaultsEmptyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::stable::agones::dev::sdk::_Empty_default_instance_;
    new (ptr) ::stable::agones::dev::sdk::Empty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stable::agones::dev::sdk::Empty::InitAsDefaultInstance();
}

void InitDefaultsEmpty() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEmptyImpl);
}

void InitDefaultsKeyValueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::stable::agones::dev::sdk::_KeyValue_default_instance_;
    new (ptr) ::stable::agones::dev::sdk::KeyValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stable::agones::dev::sdk::KeyValue::InitAsDefaultInstance();
}

void InitDefaultsKeyValue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyValueImpl);
}

void InitDefaultsGameServer_ObjectMeta_AnnotationsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::stable::agones::dev::sdk::_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::stable::agones::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse();
  }
  ::stable::agones::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsGameServer_ObjectMeta_AnnotationsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameServer_ObjectMeta_AnnotationsEntry_DoNotUseImpl);
}

void InitDefaultsGameServer_ObjectMeta_LabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::stable::agones::dev::sdk::_GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::stable::agones::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse();
  }
  ::stable::agones::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsGameServer_ObjectMeta_LabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameServer_ObjectMeta_LabelsEntry_DoNotUseImpl);
}

void InitDefaultsGameServer_ObjectMetaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_sdk_2eproto::InitDefaultsGameServer_ObjectMeta_AnnotationsEntry_DoNotUse();
  protobuf_sdk_2eproto::InitDefaultsGameServer_ObjectMeta_LabelsEntry_DoNotUse();
  {
    void* ptr = &::stable::agones::dev::sdk::_GameServer_ObjectMeta_default_instance_;
    new (ptr) ::stable::agones::dev::sdk::GameServer_ObjectMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stable::agones::dev::sdk::GameServer_ObjectMeta::InitAsDefaultInstance();
}

void InitDefaultsGameServer_ObjectMeta() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameServer_ObjectMetaImpl);
}

void InitDefaultsGameServer_Spec_HealthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::stable::agones::dev::sdk::_GameServer_Spec_Health_default_instance_;
    new (ptr) ::stable::agones::dev::sdk::GameServer_Spec_Health();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stable::agones::dev::sdk::GameServer_Spec_Health::InitAsDefaultInstance();
}

void InitDefaultsGameServer_Spec_Health() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameServer_Spec_HealthImpl);
}

void InitDefaultsGameServer_SpecImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_sdk_2eproto::InitDefaultsGameServer_Spec_Health();
  {
    void* ptr = &::stable::agones::dev::sdk::_GameServer_Spec_default_instance_;
    new (ptr) ::stable::agones::dev::sdk::GameServer_Spec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stable::agones::dev::sdk::GameServer_Spec::InitAsDefaultInstance();
}

void InitDefaultsGameServer_Spec() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameServer_SpecImpl);
}

void InitDefaultsGameServer_Status_PortImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::stable::agones::dev::sdk::_GameServer_Status_Port_default_instance_;
    new (ptr) ::stable::agones::dev::sdk::GameServer_Status_Port();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stable::agones::dev::sdk::GameServer_Status_Port::InitAsDefaultInstance();
}

void InitDefaultsGameServer_Status_Port() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameServer_Status_PortImpl);
}

void InitDefaultsGameServer_StatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_sdk_2eproto::InitDefaultsGameServer_Status_Port();
  {
    void* ptr = &::stable::agones::dev::sdk::_GameServer_Status_default_instance_;
    new (ptr) ::stable::agones::dev::sdk::GameServer_Status();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stable::agones::dev::sdk::GameServer_Status::InitAsDefaultInstance();
}

void InitDefaultsGameServer_Status() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameServer_StatusImpl);
}

void InitDefaultsGameServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_sdk_2eproto::InitDefaultsGameServer_ObjectMeta();
  protobuf_sdk_2eproto::InitDefaultsGameServer_Spec();
  protobuf_sdk_2eproto::InitDefaultsGameServer_Status();
  {
    void* ptr = &::stable::agones::dev::sdk::_GameServer_default_instance_;
    new (ptr) ::stable::agones::dev::sdk::GameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stable::agones::dev::sdk::GameServer::InitAsDefaultInstance();
}

void InitDefaultsGameServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameServerImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::KeyValue, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::KeyValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta, namespace__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta, resource_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta, generation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta, creation_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta, deletion_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta, annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_ObjectMeta, labels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Spec_Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Spec_Health, disabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Spec_Health, periodseconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Spec_Health, failurethreshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Spec_Health, initialdelayseconds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Spec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Spec, health_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Status_Port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Status_Port, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Status_Port, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Status, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Status, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer_Status, ports_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer, object_meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer, spec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stable::agones::dev::sdk::GameServer, status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::stable::agones::dev::sdk::Empty)},
  { 5, -1, sizeof(::stable::agones::dev::sdk::KeyValue)},
  { 12, 19, sizeof(::stable::agones::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse)},
  { 21, 28, sizeof(::stable::agones::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse)},
  { 30, -1, sizeof(::stable::agones::dev::sdk::GameServer_ObjectMeta)},
  { 44, -1, sizeof(::stable::agones::dev::sdk::GameServer_Spec_Health)},
  { 53, -1, sizeof(::stable::agones::dev::sdk::GameServer_Spec)},
  { 59, -1, sizeof(::stable::agones::dev::sdk::GameServer_Status_Port)},
  { 66, -1, sizeof(::stable::agones::dev::sdk::GameServer_Status)},
  { 74, -1, sizeof(::stable::agones::dev::sdk::GameServer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::stable::agones::dev::sdk::_Empty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stable::agones::dev::sdk::_KeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stable::agones::dev::sdk::_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stable::agones::dev::sdk::_GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stable::agones::dev::sdk::_GameServer_ObjectMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stable::agones::dev::sdk::_GameServer_Spec_Health_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stable::agones::dev::sdk::_GameServer_Spec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stable::agones::dev::sdk::_GameServer_Status_Port_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stable::agones::dev::sdk::_GameServer_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stable::agones::dev::sdk::_GameServer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sdk.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tsdk.proto\022\025stable.agones.dev.sdk\032\034goog"
      "le/api/annotations.proto\"\007\n\005Empty\"&\n\010Key"
      "Value\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\242\007\n\nGa"
      "meServer\022A\n\013object_meta\030\001 \001(\0132,.stable.a"
      "gones.dev.sdk.GameServer.ObjectMeta\0224\n\004s"
      "pec\030\002 \001(\0132&.stable.agones.dev.sdk.GameSe"
      "rver.Spec\0228\n\006status\030\003 \001(\0132(.stable.agone"
      "s.dev.sdk.GameServer.Status\032\241\003\n\nObjectMe"
      "ta\022\014\n\004name\030\001 \001(\t\022\021\n\tnamespace\030\002 \001(\t\022\013\n\003u"
      "id\030\003 \001(\t\022\030\n\020resource_version\030\004 \001(\t\022\022\n\nge"
      "neration\030\005 \001(\003\022\032\n\022creation_timestamp\030\006 \001"
      "(\003\022\032\n\022deletion_timestamp\030\007 \001(\003\022R\n\013annota"
      "tions\030\010 \003(\0132=.stable.agones.dev.sdk.Game"
      "Server.ObjectMeta.AnnotationsEntry\022H\n\006la"
      "bels\030\t \003(\01328.stable.agones.dev.sdk.GameS"
      "erver.ObjectMeta.LabelsEntry\0322\n\020Annotati"
      "onsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
      "\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
      "\001(\t:\0028\001\032\257\001\n\004Spec\022=\n\006health\030\001 \001(\0132-.stabl"
      "e.agones.dev.sdk.GameServer.Spec.Health\032"
      "h\n\006Health\022\020\n\010Disabled\030\001 \001(\010\022\025\n\rPeriodSec"
      "onds\030\002 \001(\005\022\030\n\020FailureThreshold\030\003 \001(\005\022\033\n\023"
      "InitialDelaySeconds\030\004 \001(\005\032\212\001\n\006Status\022\r\n\005"
      "state\030\001 \001(\t\022\017\n\007address\030\002 \001(\t\022<\n\005ports\030\003 "
      "\003(\0132-.stable.agones.dev.sdk.GameServer.S"
      "tatus.Port\032\"\n\004Port\022\014\n\004name\030\001 \001(\t\022\014\n\004port"
      "\030\002 \001(\0052\307\005\n\003SDK\022V\n\005Ready\022\034.stable.agones."
      "dev.sdk.Empty\032\034.stable.agones.dev.sdk.Em"
      "pty\"\021\202\323\344\223\002\013\"\006/ready:\001*\022\\\n\010Shutdown\022\034.sta"
      "ble.agones.dev.sdk.Empty\032\034.stable.agones"
      ".dev.sdk.Empty\"\024\202\323\344\223\002\016\"\t/shutdown:\001*\022Z\n\006"
      "Health\022\034.stable.agones.dev.sdk.Empty\032\034.s"
      "table.agones.dev.sdk.Empty\"\022\202\323\344\223\002\014\"\007/hea"
      "lth:\001*(\001\022e\n\rGetGameServer\022\034.stable.agone"
      "s.dev.sdk.Empty\032!.stable.agones.dev.sdk."
      "GameServer\"\023\202\323\344\223\002\r\022\013/gameserver\022o\n\017Watch"
      "GameServer\022\034.stable.agones.dev.sdk.Empty"
      "\032!.stable.agones.dev.sdk.GameServer\"\031\202\323\344"
      "\223\002\023\022\021/watch/gameserver0\001\022e\n\010SetLabel\022\037.s"
      "table.agones.dev.sdk.KeyValue\032\034.stable.a"
      "gones.dev.sdk.Empty\"\032\202\323\344\223\002\024\032\017/metadata/l"
      "abel:\001*\022o\n\rSetAnnotation\022\037.stable.agones"
      ".dev.sdk.KeyValue\032\034.stable.agones.dev.sd"
      "k.Empty\"\037\202\323\344\223\002\031\032\024/metadata/annotation:\001*"
      "B\005Z\003sdkb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sdk.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sdk_2eproto
namespace stable {
namespace agones {
namespace dev {
namespace sdk {

// ===================================================================

void Empty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sdk_2eproto::InitDefaultsEmpty();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stable.agones.dev.sdk.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stable.agones.dev.sdk.Empty)
}

void Empty::SharedCtor() {
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:stable.agones.dev.sdk.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  ::protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Empty& Empty::default_instance() {
  ::protobuf_sdk_2eproto::InitDefaultsEmpty();
  return *internal_default_instance();
}

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:stable.agones.dev.sdk.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stable.agones.dev.sdk.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:stable.agones.dev.sdk.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stable.agones.dev.sdk.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stable.agones.dev.sdk.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stable.agones.dev.sdk.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stable.agones.dev.sdk.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stable.agones.dev.sdk.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stable.agones.dev.sdk.Empty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stable.agones.dev.sdk.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stable.agones.dev.sdk.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stable.agones.dev.sdk.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stable.agones.dev.sdk.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stable.agones.dev.sdk.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stable.agones.dev.sdk.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sdk_2eproto::InitDefaultsKeyValue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stable.agones.dev.sdk.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:stable.agones.dev.sdk.KeyValue)
}

void KeyValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:stable.agones.dev.sdk.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  ::protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyValue& KeyValue::default_instance() {
  ::protobuf_sdk_2eproto::InitDefaultsKeyValue();
  return *internal_default_instance();
}

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:stable.agones.dev.sdk.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stable.agones.dev.sdk.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.KeyValue.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.KeyValue.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stable.agones.dev.sdk.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stable.agones.dev.sdk.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stable.agones.dev.sdk.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.KeyValue.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.KeyValue.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stable.agones.dev.sdk.KeyValue)
}

::google::protobuf::uint8* KeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stable.agones.dev.sdk.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.KeyValue.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.KeyValue.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stable.agones.dev.sdk.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stable.agones.dev.sdk.KeyValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stable.agones.dev.sdk.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stable.agones.dev.sdk.KeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stable.agones.dev.sdk.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stable.agones.dev.sdk.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stable.agones.dev.sdk.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stable.agones.dev.sdk.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse() {}
GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::MergeFrom(const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[2];
}
void GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

GameServer_ObjectMeta_LabelsEntry_DoNotUse::GameServer_ObjectMeta_LabelsEntry_DoNotUse() {}
GameServer_ObjectMeta_LabelsEntry_DoNotUse::GameServer_ObjectMeta_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GameServer_ObjectMeta_LabelsEntry_DoNotUse::MergeFrom(const GameServer_ObjectMeta_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GameServer_ObjectMeta_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[3];
}
void GameServer_ObjectMeta_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void GameServer_ObjectMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServer_ObjectMeta::kNameFieldNumber;
const int GameServer_ObjectMeta::kNamespaceFieldNumber;
const int GameServer_ObjectMeta::kUidFieldNumber;
const int GameServer_ObjectMeta::kResourceVersionFieldNumber;
const int GameServer_ObjectMeta::kGenerationFieldNumber;
const int GameServer_ObjectMeta::kCreationTimestampFieldNumber;
const int GameServer_ObjectMeta::kDeletionTimestampFieldNumber;
const int GameServer_ObjectMeta::kAnnotationsFieldNumber;
const int GameServer_ObjectMeta::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServer_ObjectMeta::GameServer_ObjectMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sdk_2eproto::InitDefaultsGameServer_ObjectMeta();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stable.agones.dev.sdk.GameServer.ObjectMeta)
}
GameServer_ObjectMeta::GameServer_ObjectMeta(const GameServer_ObjectMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotations_.MergeFrom(from.annotations_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uid().size() > 0) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  resource_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resource_version().size() > 0) {
    resource_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_version_);
  }
  ::memcpy(&generation_, &from.generation_,
    static_cast<size_t>(reinterpret_cast<char*>(&deletion_timestamp_) -
    reinterpret_cast<char*>(&generation_)) + sizeof(deletion_timestamp_));
  // @@protoc_insertion_point(copy_constructor:stable.agones.dev.sdk.GameServer.ObjectMeta)
}

void GameServer_ObjectMeta::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&generation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deletion_timestamp_) -
      reinterpret_cast<char*>(&generation_)) + sizeof(deletion_timestamp_));
  _cached_size_ = 0;
}

GameServer_ObjectMeta::~GameServer_ObjectMeta() {
  // @@protoc_insertion_point(destructor:stable.agones.dev.sdk.GameServer.ObjectMeta)
  SharedDtor();
}

void GameServer_ObjectMeta::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameServer_ObjectMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServer_ObjectMeta::descriptor() {
  ::protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServer_ObjectMeta& GameServer_ObjectMeta::default_instance() {
  ::protobuf_sdk_2eproto::InitDefaultsGameServer_ObjectMeta();
  return *internal_default_instance();
}

GameServer_ObjectMeta* GameServer_ObjectMeta::New(::google::protobuf::Arena* arena) const {
  GameServer_ObjectMeta* n = new GameServer_ObjectMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameServer_ObjectMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:stable.agones.dev.sdk.GameServer.ObjectMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  labels_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&generation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deletion_timestamp_) -
      reinterpret_cast<char*>(&generation_)) + sizeof(deletion_timestamp_));
  _internal_metadata_.Clear();
}

bool GameServer_ObjectMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stable.agones.dev.sdk.GameServer.ObjectMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.ObjectMeta.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namespace = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.ObjectMeta.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.ObjectMeta.uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string resource_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resource_version().data(), static_cast<int>(this->resource_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 generation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &generation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 creation_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 deletion_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deletion_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> annotations = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GameServer_ObjectMeta_AnnotationsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&annotations_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          GameServer_ObjectMeta_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GameServer_ObjectMeta_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.ObjectMeta.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.ObjectMeta.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stable.agones.dev.sdk.GameServer.ObjectMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stable.agones.dev.sdk.GameServer.ObjectMeta)
  return false;
#undef DO_
}

void GameServer_ObjectMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stable.agones.dev.sdk.GameServer.ObjectMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.ObjectMeta.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.ObjectMeta.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->namespace_(), output);
  }

  // string uid = 3;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.ObjectMeta.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uid(), output);
  }

  // string resource_version = 4;
  if (this->resource_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_version().data(), static_cast<int>(this->resource_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->resource_version(), output);
  }

  // int64 generation = 5;
  if (this->generation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->generation(), output);
  }

  // int64 creation_timestamp = 6;
  if (this->creation_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->creation_timestamp(), output);
  }

  // int64 deletion_timestamp = 7;
  if (this->deletion_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->deletion_timestamp(), output);
  }

  // map<string, string> annotations = 8;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stable.agones.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stable.agones.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->annotations().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> labels = 9;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stable.agones.dev.sdk.GameServer.ObjectMeta.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stable.agones.dev.sdk.GameServer.ObjectMeta.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GameServer_ObjectMeta_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameServer_ObjectMeta_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stable.agones.dev.sdk.GameServer.ObjectMeta)
}

::google::protobuf::uint8* GameServer_ObjectMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stable.agones.dev.sdk.GameServer.ObjectMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.ObjectMeta.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.ObjectMeta.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->namespace_(), target);
  }

  // string uid = 3;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.ObjectMeta.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  // string resource_version = 4;
  if (this->resource_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_version().data(), static_cast<int>(this->resource_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.ObjectMeta.resource_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resource_version(), target);
  }

  // int64 generation = 5;
  if (this->generation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->generation(), target);
  }

  // int64 creation_timestamp = 6;
  if (this->creation_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->creation_timestamp(), target);
  }

  // int64 deletion_timestamp = 7;
  if (this->deletion_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->deletion_timestamp(), target);
  }

  // map<string, string> annotations = 8;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stable.agones.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stable.agones.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.value");
      }
    };

    if (deterministic &&
        this->annotations().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> labels = 9;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stable.agones.dev.sdk.GameServer.ObjectMeta.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stable.agones.dev.sdk.GameServer.ObjectMeta.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GameServer_ObjectMeta_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameServer_ObjectMeta_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stable.agones.dev.sdk.GameServer.ObjectMeta)
  return target;
}

size_t GameServer_ObjectMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stable.agones.dev.sdk.GameServer.ObjectMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> annotations = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->annotations_size());
  {
    ::google::protobuf::scoped_ptr<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->annotations().begin();
        it != this->annotations().end(); ++it) {
      entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> labels = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<GameServer_ObjectMeta_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // string uid = 3;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // string resource_version = 4;
  if (this->resource_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource_version());
  }

  // int64 generation = 5;
  if (this->generation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->generation());
  }

  // int64 creation_timestamp = 6;
  if (this->creation_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->creation_timestamp());
  }

  // int64 deletion_timestamp = 7;
  if (this->deletion_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->deletion_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServer_ObjectMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stable.agones.dev.sdk.GameServer.ObjectMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_ObjectMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServer_ObjectMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stable.agones.dev.sdk.GameServer.ObjectMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stable.agones.dev.sdk.GameServer.ObjectMeta)
    MergeFrom(*source);
  }
}

void GameServer_ObjectMeta::MergeFrom(const GameServer_ObjectMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stable.agones.dev.sdk.GameServer.ObjectMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.resource_version().size() > 0) {

    resource_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_version_);
  }
  if (from.generation() != 0) {
    set_generation(from.generation());
  }
  if (from.creation_timestamp() != 0) {
    set_creation_timestamp(from.creation_timestamp());
  }
  if (from.deletion_timestamp() != 0) {
    set_deletion_timestamp(from.deletion_timestamp());
  }
}

void GameServer_ObjectMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stable.agones.dev.sdk.GameServer.ObjectMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_ObjectMeta::CopyFrom(const GameServer_ObjectMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stable.agones.dev.sdk.GameServer.ObjectMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_ObjectMeta::IsInitialized() const {
  return true;
}

void GameServer_ObjectMeta::Swap(GameServer_ObjectMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameServer_ObjectMeta::InternalSwap(GameServer_ObjectMeta* other) {
  using std::swap;
  annotations_.Swap(&other->annotations_);
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_);
  namespace__.Swap(&other->namespace__);
  uid_.Swap(&other->uid_);
  resource_version_.Swap(&other->resource_version_);
  swap(generation_, other->generation_);
  swap(creation_timestamp_, other->creation_timestamp_);
  swap(deletion_timestamp_, other->deletion_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameServer_ObjectMeta::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameServer_Spec_Health::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServer_Spec_Health::kDisabledFieldNumber;
const int GameServer_Spec_Health::kPeriodSecondsFieldNumber;
const int GameServer_Spec_Health::kFailureThresholdFieldNumber;
const int GameServer_Spec_Health::kInitialDelaySecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServer_Spec_Health::GameServer_Spec_Health()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sdk_2eproto::InitDefaultsGameServer_Spec_Health();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stable.agones.dev.sdk.GameServer.Spec.Health)
}
GameServer_Spec_Health::GameServer_Spec_Health(const GameServer_Spec_Health& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&disabled_, &from.disabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&initialdelayseconds_) -
    reinterpret_cast<char*>(&disabled_)) + sizeof(initialdelayseconds_));
  // @@protoc_insertion_point(copy_constructor:stable.agones.dev.sdk.GameServer.Spec.Health)
}

void GameServer_Spec_Health::SharedCtor() {
  ::memset(&disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initialdelayseconds_) -
      reinterpret_cast<char*>(&disabled_)) + sizeof(initialdelayseconds_));
  _cached_size_ = 0;
}

GameServer_Spec_Health::~GameServer_Spec_Health() {
  // @@protoc_insertion_point(destructor:stable.agones.dev.sdk.GameServer.Spec.Health)
  SharedDtor();
}

void GameServer_Spec_Health::SharedDtor() {
}

void GameServer_Spec_Health::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServer_Spec_Health::descriptor() {
  ::protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServer_Spec_Health& GameServer_Spec_Health::default_instance() {
  ::protobuf_sdk_2eproto::InitDefaultsGameServer_Spec_Health();
  return *internal_default_instance();
}

GameServer_Spec_Health* GameServer_Spec_Health::New(::google::protobuf::Arena* arena) const {
  GameServer_Spec_Health* n = new GameServer_Spec_Health;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameServer_Spec_Health::Clear() {
// @@protoc_insertion_point(message_clear_start:stable.agones.dev.sdk.GameServer.Spec.Health)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initialdelayseconds_) -
      reinterpret_cast<char*>(&disabled_)) + sizeof(initialdelayseconds_));
  _internal_metadata_.Clear();
}

bool GameServer_Spec_Health::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stable.agones.dev.sdk.GameServer.Spec.Health)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool Disabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PeriodSeconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &periodseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FailureThreshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failurethreshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 InitialDelaySeconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initialdelayseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stable.agones.dev.sdk.GameServer.Spec.Health)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stable.agones.dev.sdk.GameServer.Spec.Health)
  return false;
#undef DO_
}

void GameServer_Spec_Health::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stable.agones.dev.sdk.GameServer.Spec.Health)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Disabled = 1;
  if (this->disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disabled(), output);
  }

  // int32 PeriodSeconds = 2;
  if (this->periodseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->periodseconds(), output);
  }

  // int32 FailureThreshold = 3;
  if (this->failurethreshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->failurethreshold(), output);
  }

  // int32 InitialDelaySeconds = 4;
  if (this->initialdelayseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->initialdelayseconds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stable.agones.dev.sdk.GameServer.Spec.Health)
}

::google::protobuf::uint8* GameServer_Spec_Health::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stable.agones.dev.sdk.GameServer.Spec.Health)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Disabled = 1;
  if (this->disabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disabled(), target);
  }

  // int32 PeriodSeconds = 2;
  if (this->periodseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->periodseconds(), target);
  }

  // int32 FailureThreshold = 3;
  if (this->failurethreshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->failurethreshold(), target);
  }

  // int32 InitialDelaySeconds = 4;
  if (this->initialdelayseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->initialdelayseconds(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stable.agones.dev.sdk.GameServer.Spec.Health)
  return target;
}

size_t GameServer_Spec_Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stable.agones.dev.sdk.GameServer.Spec.Health)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool Disabled = 1;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  // int32 PeriodSeconds = 2;
  if (this->periodseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->periodseconds());
  }

  // int32 FailureThreshold = 3;
  if (this->failurethreshold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->failurethreshold());
  }

  // int32 InitialDelaySeconds = 4;
  if (this->initialdelayseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->initialdelayseconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServer_Spec_Health::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stable.agones.dev.sdk.GameServer.Spec.Health)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Spec_Health* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServer_Spec_Health>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stable.agones.dev.sdk.GameServer.Spec.Health)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stable.agones.dev.sdk.GameServer.Spec.Health)
    MergeFrom(*source);
  }
}

void GameServer_Spec_Health::MergeFrom(const GameServer_Spec_Health& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stable.agones.dev.sdk.GameServer.Spec.Health)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.disabled() != 0) {
    set_disabled(from.disabled());
  }
  if (from.periodseconds() != 0) {
    set_periodseconds(from.periodseconds());
  }
  if (from.failurethreshold() != 0) {
    set_failurethreshold(from.failurethreshold());
  }
  if (from.initialdelayseconds() != 0) {
    set_initialdelayseconds(from.initialdelayseconds());
  }
}

void GameServer_Spec_Health::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stable.agones.dev.sdk.GameServer.Spec.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Spec_Health::CopyFrom(const GameServer_Spec_Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stable.agones.dev.sdk.GameServer.Spec.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Spec_Health::IsInitialized() const {
  return true;
}

void GameServer_Spec_Health::Swap(GameServer_Spec_Health* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameServer_Spec_Health::InternalSwap(GameServer_Spec_Health* other) {
  using std::swap;
  swap(disabled_, other->disabled_);
  swap(periodseconds_, other->periodseconds_);
  swap(failurethreshold_, other->failurethreshold_);
  swap(initialdelayseconds_, other->initialdelayseconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameServer_Spec_Health::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameServer_Spec::InitAsDefaultInstance() {
  ::stable::agones::dev::sdk::_GameServer_Spec_default_instance_._instance.get_mutable()->health_ = const_cast< ::stable::agones::dev::sdk::GameServer_Spec_Health*>(
      ::stable::agones::dev::sdk::GameServer_Spec_Health::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServer_Spec::kHealthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServer_Spec::GameServer_Spec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sdk_2eproto::InitDefaultsGameServer_Spec();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stable.agones.dev.sdk.GameServer.Spec)
}
GameServer_Spec::GameServer_Spec(const GameServer_Spec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_health()) {
    health_ = new ::stable::agones::dev::sdk::GameServer_Spec_Health(*from.health_);
  } else {
    health_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:stable.agones.dev.sdk.GameServer.Spec)
}

void GameServer_Spec::SharedCtor() {
  health_ = NULL;
  _cached_size_ = 0;
}

GameServer_Spec::~GameServer_Spec() {
  // @@protoc_insertion_point(destructor:stable.agones.dev.sdk.GameServer.Spec)
  SharedDtor();
}

void GameServer_Spec::SharedDtor() {
  if (this != internal_default_instance()) delete health_;
}

void GameServer_Spec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServer_Spec::descriptor() {
  ::protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServer_Spec& GameServer_Spec::default_instance() {
  ::protobuf_sdk_2eproto::InitDefaultsGameServer_Spec();
  return *internal_default_instance();
}

GameServer_Spec* GameServer_Spec::New(::google::protobuf::Arena* arena) const {
  GameServer_Spec* n = new GameServer_Spec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameServer_Spec::Clear() {
// @@protoc_insertion_point(message_clear_start:stable.agones.dev.sdk.GameServer.Spec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && health_ != NULL) {
    delete health_;
  }
  health_ = NULL;
  _internal_metadata_.Clear();
}

bool GameServer_Spec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stable.agones.dev.sdk.GameServer.Spec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .stable.agones.dev.sdk.GameServer.Spec.Health health = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_health()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stable.agones.dev.sdk.GameServer.Spec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stable.agones.dev.sdk.GameServer.Spec)
  return false;
#undef DO_
}

void GameServer_Spec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stable.agones.dev.sdk.GameServer.Spec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stable.agones.dev.sdk.GameServer.Spec.Health health = 1;
  if (this->has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->health_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stable.agones.dev.sdk.GameServer.Spec)
}

::google::protobuf::uint8* GameServer_Spec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stable.agones.dev.sdk.GameServer.Spec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stable.agones.dev.sdk.GameServer.Spec.Health health = 1;
  if (this->has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->health_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stable.agones.dev.sdk.GameServer.Spec)
  return target;
}

size_t GameServer_Spec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stable.agones.dev.sdk.GameServer.Spec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .stable.agones.dev.sdk.GameServer.Spec.Health health = 1;
  if (this->has_health()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->health_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServer_Spec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stable.agones.dev.sdk.GameServer.Spec)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Spec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServer_Spec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stable.agones.dev.sdk.GameServer.Spec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stable.agones.dev.sdk.GameServer.Spec)
    MergeFrom(*source);
  }
}

void GameServer_Spec::MergeFrom(const GameServer_Spec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stable.agones.dev.sdk.GameServer.Spec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_health()) {
    mutable_health()->::stable::agones::dev::sdk::GameServer_Spec_Health::MergeFrom(from.health());
  }
}

void GameServer_Spec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stable.agones.dev.sdk.GameServer.Spec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Spec::CopyFrom(const GameServer_Spec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stable.agones.dev.sdk.GameServer.Spec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Spec::IsInitialized() const {
  return true;
}

void GameServer_Spec::Swap(GameServer_Spec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameServer_Spec::InternalSwap(GameServer_Spec* other) {
  using std::swap;
  swap(health_, other->health_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameServer_Spec::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameServer_Status_Port::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServer_Status_Port::kNameFieldNumber;
const int GameServer_Status_Port::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServer_Status_Port::GameServer_Status_Port()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sdk_2eproto::InitDefaultsGameServer_Status_Port();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stable.agones.dev.sdk.GameServer.Status.Port)
}
GameServer_Status_Port::GameServer_Status_Port(const GameServer_Status_Port& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:stable.agones.dev.sdk.GameServer.Status.Port)
}

void GameServer_Status_Port::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _cached_size_ = 0;
}

GameServer_Status_Port::~GameServer_Status_Port() {
  // @@protoc_insertion_point(destructor:stable.agones.dev.sdk.GameServer.Status.Port)
  SharedDtor();
}

void GameServer_Status_Port::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameServer_Status_Port::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServer_Status_Port::descriptor() {
  ::protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServer_Status_Port& GameServer_Status_Port::default_instance() {
  ::protobuf_sdk_2eproto::InitDefaultsGameServer_Status_Port();
  return *internal_default_instance();
}

GameServer_Status_Port* GameServer_Status_Port::New(::google::protobuf::Arena* arena) const {
  GameServer_Status_Port* n = new GameServer_Status_Port;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameServer_Status_Port::Clear() {
// @@protoc_insertion_point(message_clear_start:stable.agones.dev.sdk.GameServer.Status.Port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

bool GameServer_Status_Port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stable.agones.dev.sdk.GameServer.Status.Port)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.Status.Port.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stable.agones.dev.sdk.GameServer.Status.Port)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stable.agones.dev.sdk.GameServer.Status.Port)
  return false;
#undef DO_
}

void GameServer_Status_Port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stable.agones.dev.sdk.GameServer.Status.Port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.Status.Port.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stable.agones.dev.sdk.GameServer.Status.Port)
}

::google::protobuf::uint8* GameServer_Status_Port::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stable.agones.dev.sdk.GameServer.Status.Port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.Status.Port.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stable.agones.dev.sdk.GameServer.Status.Port)
  return target;
}

size_t GameServer_Status_Port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stable.agones.dev.sdk.GameServer.Status.Port)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServer_Status_Port::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stable.agones.dev.sdk.GameServer.Status.Port)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Status_Port* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServer_Status_Port>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stable.agones.dev.sdk.GameServer.Status.Port)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stable.agones.dev.sdk.GameServer.Status.Port)
    MergeFrom(*source);
  }
}

void GameServer_Status_Port::MergeFrom(const GameServer_Status_Port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stable.agones.dev.sdk.GameServer.Status.Port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void GameServer_Status_Port::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stable.agones.dev.sdk.GameServer.Status.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Status_Port::CopyFrom(const GameServer_Status_Port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stable.agones.dev.sdk.GameServer.Status.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Status_Port::IsInitialized() const {
  return true;
}

void GameServer_Status_Port::Swap(GameServer_Status_Port* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameServer_Status_Port::InternalSwap(GameServer_Status_Port* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameServer_Status_Port::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameServer_Status::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServer_Status::kStateFieldNumber;
const int GameServer_Status::kAddressFieldNumber;
const int GameServer_Status::kPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServer_Status::GameServer_Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sdk_2eproto::InitDefaultsGameServer_Status();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stable.agones.dev.sdk.GameServer.Status)
}
GameServer_Status::GameServer_Status(const GameServer_Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ports_(from.ports_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:stable.agones.dev.sdk.GameServer.Status)
}

void GameServer_Status::SharedCtor() {
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GameServer_Status::~GameServer_Status() {
  // @@protoc_insertion_point(destructor:stable.agones.dev.sdk.GameServer.Status)
  SharedDtor();
}

void GameServer_Status::SharedDtor() {
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameServer_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServer_Status::descriptor() {
  ::protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServer_Status& GameServer_Status::default_instance() {
  ::protobuf_sdk_2eproto::InitDefaultsGameServer_Status();
  return *internal_default_instance();
}

GameServer_Status* GameServer_Status::New(::google::protobuf::Arena* arena) const {
  GameServer_Status* n = new GameServer_Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameServer_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:stable.agones.dev.sdk.GameServer.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ports_.Clear();
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GameServer_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stable.agones.dev.sdk.GameServer.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.Status.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stable.agones.dev.sdk.GameServer.Status.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .stable.agones.dev.sdk.GameServer.Status.Port ports = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stable.agones.dev.sdk.GameServer.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stable.agones.dev.sdk.GameServer.Status)
  return false;
#undef DO_
}

void GameServer_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stable.agones.dev.sdk.GameServer.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.Status.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->state(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.Status.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // repeated .stable.agones.dev.sdk.GameServer.Status.Port ports = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ports(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stable.agones.dev.sdk.GameServer.Status)
}

::google::protobuf::uint8* GameServer_Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stable.agones.dev.sdk.GameServer.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.Status.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->state(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stable.agones.dev.sdk.GameServer.Status.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // repeated .stable.agones.dev.sdk.GameServer.Status.Port ports = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->ports(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stable.agones.dev.sdk.GameServer.Status)
  return target;
}

size_t GameServer_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stable.agones.dev.sdk.GameServer.Status)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .stable.agones.dev.sdk.GameServer.Status.Port ports = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ports(static_cast<int>(i)));
    }
  }

  // string state = 1;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServer_Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stable.agones.dev.sdk.GameServer.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServer_Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stable.agones.dev.sdk.GameServer.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stable.agones.dev.sdk.GameServer.Status)
    MergeFrom(*source);
  }
}

void GameServer_Status::MergeFrom(const GameServer_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stable.agones.dev.sdk.GameServer.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ports_.MergeFrom(from.ports_);
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void GameServer_Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stable.agones.dev.sdk.GameServer.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Status::CopyFrom(const GameServer_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stable.agones.dev.sdk.GameServer.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Status::IsInitialized() const {
  return true;
}

void GameServer_Status::Swap(GameServer_Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameServer_Status::InternalSwap(GameServer_Status* other) {
  using std::swap;
  ports_.InternalSwap(&other->ports_);
  state_.Swap(&other->state_);
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameServer_Status::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameServer::InitAsDefaultInstance() {
  ::stable::agones::dev::sdk::_GameServer_default_instance_._instance.get_mutable()->object_meta_ = const_cast< ::stable::agones::dev::sdk::GameServer_ObjectMeta*>(
      ::stable::agones::dev::sdk::GameServer_ObjectMeta::internal_default_instance());
  ::stable::agones::dev::sdk::_GameServer_default_instance_._instance.get_mutable()->spec_ = const_cast< ::stable::agones::dev::sdk::GameServer_Spec*>(
      ::stable::agones::dev::sdk::GameServer_Spec::internal_default_instance());
  ::stable::agones::dev::sdk::_GameServer_default_instance_._instance.get_mutable()->status_ = const_cast< ::stable::agones::dev::sdk::GameServer_Status*>(
      ::stable::agones::dev::sdk::GameServer_Status::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServer::kObjectMetaFieldNumber;
const int GameServer::kSpecFieldNumber;
const int GameServer::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServer::GameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sdk_2eproto::InitDefaultsGameServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stable.agones.dev.sdk.GameServer)
}
GameServer::GameServer(const GameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_meta()) {
    object_meta_ = new ::stable::agones::dev::sdk::GameServer_ObjectMeta(*from.object_meta_);
  } else {
    object_meta_ = NULL;
  }
  if (from.has_spec()) {
    spec_ = new ::stable::agones::dev::sdk::GameServer_Spec(*from.spec_);
  } else {
    spec_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::stable::agones::dev::sdk::GameServer_Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:stable.agones.dev.sdk.GameServer)
}

void GameServer::SharedCtor() {
  ::memset(&object_meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&object_meta_)) + sizeof(status_));
  _cached_size_ = 0;
}

GameServer::~GameServer() {
  // @@protoc_insertion_point(destructor:stable.agones.dev.sdk.GameServer)
  SharedDtor();
}

void GameServer::SharedDtor() {
  if (this != internal_default_instance()) delete object_meta_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void GameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServer::descriptor() {
  ::protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServer& GameServer::default_instance() {
  ::protobuf_sdk_2eproto::InitDefaultsGameServer();
  return *internal_default_instance();
}

GameServer* GameServer::New(::google::protobuf::Arena* arena) const {
  GameServer* n = new GameServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:stable.agones.dev.sdk.GameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && object_meta_ != NULL) {
    delete object_meta_;
  }
  object_meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && spec_ != NULL) {
    delete spec_;
  }
  spec_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  _internal_metadata_.Clear();
}

bool GameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stable.agones.dev.sdk.GameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .stable.agones.dev.sdk.GameServer.ObjectMeta object_meta = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stable.agones.dev.sdk.GameServer.Spec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stable.agones.dev.sdk.GameServer.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stable.agones.dev.sdk.GameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stable.agones.dev.sdk.GameServer)
  return false;
#undef DO_
}

void GameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stable.agones.dev.sdk.GameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stable.agones.dev.sdk.GameServer.ObjectMeta object_meta = 1;
  if (this->has_object_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->object_meta_, output);
  }

  // .stable.agones.dev.sdk.GameServer.Spec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->spec_, output);
  }

  // .stable.agones.dev.sdk.GameServer.Status status = 3;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->status_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stable.agones.dev.sdk.GameServer)
}

::google::protobuf::uint8* GameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stable.agones.dev.sdk.GameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stable.agones.dev.sdk.GameServer.ObjectMeta object_meta = 1;
  if (this->has_object_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->object_meta_, deterministic, target);
  }

  // .stable.agones.dev.sdk.GameServer.Spec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->spec_, deterministic, target);
  }

  // .stable.agones.dev.sdk.GameServer.Status status = 3;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->status_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stable.agones.dev.sdk.GameServer)
  return target;
}

size_t GameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stable.agones.dev.sdk.GameServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .stable.agones.dev.sdk.GameServer.ObjectMeta object_meta = 1;
  if (this->has_object_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->object_meta_);
  }

  // .stable.agones.dev.sdk.GameServer.Spec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->spec_);
  }

  // .stable.agones.dev.sdk.GameServer.Status status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stable.agones.dev.sdk.GameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stable.agones.dev.sdk.GameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stable.agones.dev.sdk.GameServer)
    MergeFrom(*source);
  }
}

void GameServer::MergeFrom(const GameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stable.agones.dev.sdk.GameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_meta()) {
    mutable_object_meta()->::stable::agones::dev::sdk::GameServer_ObjectMeta::MergeFrom(from.object_meta());
  }
  if (from.has_spec()) {
    mutable_spec()->::stable::agones::dev::sdk::GameServer_Spec::MergeFrom(from.spec());
  }
  if (from.has_status()) {
    mutable_status()->::stable::agones::dev::sdk::GameServer_Status::MergeFrom(from.status());
  }
}

void GameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stable.agones.dev.sdk.GameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer::CopyFrom(const GameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stable.agones.dev.sdk.GameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer::IsInitialized() const {
  return true;
}

void GameServer::Swap(GameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameServer::InternalSwap(GameServer* other) {
  using std::swap;
  swap(object_meta_, other->object_meta_);
  swap(spec_, other->spec_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameServer::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sdk
}  // namespace dev
}  // namespace agones
}  // namespace stable

// @@protoc_insertion_point(global_scope)
